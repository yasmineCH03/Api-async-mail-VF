#!/bin/bash

# üöÄ Script de D√©ploiement - API Async Email
# Usage: ./scripts/deploy.sh [environment]

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

# V√©rifier les pr√©requis
check_prerequisites() {
    log "V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose n'est pas install√©"
    fi
    
    success "Pr√©requis v√©rifi√©s"
}

# Nettoyer l'environnement
cleanup() {
    log "Nettoyage de l'environnement..."
    
    # Arr√™ter les containers existants
    docker-compose down 2>/dev/null || true
    
    # Nettoyer les images inutilis√©es
    docker image prune -f
    
    success "Environnement nettoy√©"
}

# Construire les images
build_images() {
    log "Construction des images Docker..."
    
    docker-compose build --no-cache
    
    success "Images construites"
}

# D√©marrer les services
start_services() {
    log "D√©marrage des services..."
    
    docker-compose up -d
    
    # Attendre que les services soient pr√™ts
    log "Attente du d√©marrage des services..."
    sleep 30
    
    success "Services d√©marr√©s"
}

# V√©rifier la sant√© des services
health_check() {
    log "V√©rification de la sant√© des services..."
    
    # V√©rifier que tous les containers sont en cours d'ex√©cution
    if ! docker-compose ps | grep -q "Up"; then
        error "Certains services ne sont pas d√©marr√©s"
    fi
    
    # V√©rifier l'API
    if ! curl -f http://localhost:8000/emails >/dev/null 2>&1; then
        warning "L'API n'est pas encore accessible, attente..."
        sleep 10
    fi
    
    success "Services en bonne sant√©"
}

# Installer les d√©pendances
install_dependencies() {
    log "Installation des d√©pendances..."
    
    docker-compose exec -T php composer install --no-dev --optimize-autoloader
    
    success "D√©pendances install√©es"
}

# Configurer l'application
configure_app() {
    log "Configuration de l'application..."
    
    # Vider le cache
    docker-compose exec -T php php bin/console cache:clear --env=prod
    
    # Cr√©er les r√©pertoires n√©cessaires
    docker-compose exec -T php mkdir -p var/cache var/log var/queue
    
    # D√©finir les permissions
    docker-compose exec -T php chmod -R 755 var/
    
    success "Application configur√©e"
}

# Lancer les tests
run_tests() {
    log "Ex√©cution des tests..."
    
    if docker-compose exec -T php php bin/phpunit --testdox; then
        success "Tests pass√©s"
    else
        warning "Certains tests ont √©chou√©"
    fi
}

# Afficher les informations de d√©ploiement
show_deployment_info() {
    log "Informations de d√©ploiement:"
    echo ""
    echo "üåê API: http://localhost:8000"
    echo "üìä MongoDB Express: http://localhost:8081"
    echo "üìß Mailpit: http://localhost:8025"
    echo "üê∞ RabbitMQ Management: http://localhost:15672"
    echo ""
    echo "üìã Commandes utiles:"
    echo "  - Voir les logs: docker-compose logs -f"
    echo "  - Arr√™ter: docker-compose down"
    echo "  - Red√©marrer: docker-compose restart"
    echo ""
}

# Fonction principale
main() {
    local environment=${1:-dev}
    
    log "D√©ploiement de l'API Async Email (environnement: $environment)"
    
    check_prerequisites
    cleanup
    build_images
    start_services
    install_dependencies
    configure_app
    health_check
    
    if [ "$environment" = "dev" ]; then
        run_tests
    fi
    
    show_deployment_info
    
    success "D√©ploiement termin√© avec succ√®s! üéâ"
}

# Gestion des erreurs
trap 'error "D√©ploiement √©chou√©"' ERR

# Ex√©cution du script
main "$@"
